{% include "license.njk" %}

/*! THIS FILE IS AUTO-GENERATED */

/*
 * {{ method.id }}
 *
{% if method.description %}
 * {{ method.description|cleanComments|safe|replace("\n", "\n * ") }}
{% endif %}
 *
 * Before running the sample, please make sure to run:
 *   $ npm install googleapis
 */

const {google} = require('googleapis');
const {{api.name}} = google.{{api.name}}('{{api.version}}');

async function main() {
  // By default, this method will look for, in order:
  // 1. An environment variable set to `GOOGLE_APPLICATION_CREDENTIALS`
  //    pointing to a service account credential file.
  // 2. A GCE metadata server, present in Google Cloud products like
  //    Compute Engine, Kubernetes Engine, Cloud Run, etc.
  // 3. A local OAuth token written by the Cloud SDK, obtained by running
  //    `gcloud auth application-default login`. This is preferred for local
  //    development.
  const auth = new google.auth.GoogleAuth({
    // Scopes can be specified either as an array or as a single, space-delimited string.
    scopes: [
      {% for scope in method.scopes %}'{{scope}}',
      {% endfor %}
    ],
  });

  // Acquire an auth client, and bind it to all future calls
  const authClient = await auth.getClient();
  google.options('auth', authClient);

  // Do the magic
  const res = await {{method.id}}({
    {% if method.parameters %}
    {% for pname, p in method.parameters|dictsort %}
    {% if p.description %} // {{ p.description|cleanComments|safe|replace('\n', '\n// ') }}{% endif %}
    
    {{ pname|cleanPropertyName|safe }}: {% if p.pattern %}'{{ p.pattern|unRegex }}'{% else %}'placeholder-value'{% endif %},
    {% endfor %}
    {% endif %}
    {% if method.request %}

    // Request body metadata
    requestBody: {
      // request body parameters
      // {{ requestExample | dump(2) | safe | replace('\n', '\n  // ') }}
    },
    {% elif method.supportsMediaUpload and method.mediaUpload.protocols.simple.multipart %}

    requestBody: {
      // request body parameters
    },
    {% endif %}
    {% if method.supportsMediaUpload %}
    media: {
      mimeType: 'placeholder-value';
      body: 'placeholder-value';
    },
    {% endif %}

  });
  console.log(res.data);

  {% if responseExample %}
  // Example response
  // {{ responseExample | dump(2) | safe | replace('\n', '\n  // ') }}
  {% endif %}
}

main().catch(e => {
  console.error(e);
  throw e;
});
